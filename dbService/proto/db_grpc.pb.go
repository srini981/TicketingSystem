// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: db.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbService_CreateUser_FullMethodName           = "/dbService.dbService/createUser"
	DbService_GetUser_FullMethodName              = "/dbService.dbService/GetUser"
	DbService_GetAllusers_FullMethodName          = "/dbService.dbService/GetAllusers"
	DbService_Updateuser_FullMethodName           = "/dbService.dbService/updateuser"
	DbService_Deleteuser_FullMethodName           = "/dbService.dbService/deleteuser"
	DbService_CreateRole_FullMethodName           = "/dbService.dbService/createRole"
	DbService_GetRole_FullMethodName              = "/dbService.dbService/GetRole"
	DbService_UpdateRole_FullMethodName           = "/dbService.dbService/updateRole"
	DbService_DeleteRole_FullMethodName           = "/dbService.dbService/deleteRole"
	DbService_AssignRole_FullMethodName           = "/dbService.dbService/assignRole"
	DbService_UnAssignRole_FullMethodName         = "/dbService.dbService/unAssignRole"
	DbService_GetAllRoles_FullMethodName          = "/dbService.dbService/GetAllRoles"
	DbService_GetAllUserRoles_FullMethodName      = "/dbService.dbService/GetAllUserRoles"
	DbService_CreateTicket_FullMethodName         = "/dbService.dbService/createTicket"
	DbService_GetTicket_FullMethodName            = "/dbService.dbService/GetTicket"
	DbService_GetAllTicketsForUser_FullMethodName = "/dbService.dbService/GetAllTicketsForUser"
	DbService_UpdateTicket_FullMethodName         = "/dbService.dbService/updateTicket"
	DbService_DeleteTicket_FullMethodName         = "/dbService.dbService/deleteTicket"
	DbService_GetTicketsByLabel_FullMethodName    = "/dbService.dbService/getTicketsByLabel"
	DbService_GetTicketsByPriority_FullMethodName = "/dbService.dbService/getTicketsByPriority"
	DbService_AssignTicketToUser_FullMethodName   = "/dbService.dbService/assignTicketToUser"
	DbService_GetUserByEmail_FullMethodName       = "/dbService.dbService/GetUserByEmail"
)

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbServiceClient interface {
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserResponse, error)
	GetAllusers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserResponse, error)
	Updateuser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Deleteuser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	GetRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleResponse, error)
	UpdateRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	DeleteRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssignRole(ctx context.Context, in *AssignUser, opts ...grpc.CallOption) (*RoleID, error)
	UnAssignRole(ctx context.Context, in *AssignUser, opts ...grpc.CallOption) (*RoleID, error)
	GetAllRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Roles, error)
	GetAllUserRoles(ctx context.Context, in *AssignUser, opts ...grpc.CallOption) (*Roles, error)
	CreateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetTicket(ctx context.Context, in *TicketID, opts ...grpc.CallOption) (*TicketResponse, error)
	GetAllTicketsForUser(ctx context.Context, in *TicketID, opts ...grpc.CallOption) (*ListTicketResponse, error)
	UpdateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTicket(ctx context.Context, in *TicketID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTicketsByLabel(ctx context.Context, in *TicketLabel, opts ...grpc.CallOption) (*ListTicketResponse, error)
	GetTicketsByPriority(ctx context.Context, in *TicketLabel, opts ...grpc.CallOption) (*ListTicketResponse, error)
	AssignTicketToUser(ctx context.Context, in *AssignTicket, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserByEmail(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*UserResponse, error)
}

type dbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbServiceClient(cc grpc.ClientConnInterface) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, DbService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, DbService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetAllusers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, DbService_GetAllusers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) Updateuser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DbService_Updateuser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) Deleteuser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DbService_Deleteuser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) CreateRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, DbService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, DbService_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) UpdateRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, DbService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) DeleteRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DbService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) AssignRole(ctx context.Context, in *AssignUser, opts ...grpc.CallOption) (*RoleID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleID)
	err := c.cc.Invoke(ctx, DbService_AssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) UnAssignRole(ctx context.Context, in *AssignUser, opts ...grpc.CallOption) (*RoleID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleID)
	err := c.cc.Invoke(ctx, DbService_UnAssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetAllRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Roles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Roles)
	err := c.cc.Invoke(ctx, DbService_GetAllRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetAllUserRoles(ctx context.Context, in *AssignUser, opts ...grpc.CallOption) (*Roles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Roles)
	err := c.cc.Invoke(ctx, DbService_GetAllUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) CreateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, DbService_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetTicket(ctx context.Context, in *TicketID, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, DbService_GetTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetAllTicketsForUser(ctx context.Context, in *TicketID, opts ...grpc.CallOption) (*ListTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketResponse)
	err := c.cc.Invoke(ctx, DbService_GetAllTicketsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) UpdateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DbService_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) DeleteTicket(ctx context.Context, in *TicketID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DbService_DeleteTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetTicketsByLabel(ctx context.Context, in *TicketLabel, opts ...grpc.CallOption) (*ListTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketResponse)
	err := c.cc.Invoke(ctx, DbService_GetTicketsByLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetTicketsByPriority(ctx context.Context, in *TicketLabel, opts ...grpc.CallOption) (*ListTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketResponse)
	err := c.cc.Invoke(ctx, DbService_GetTicketsByPriority_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) AssignTicketToUser(ctx context.Context, in *AssignTicket, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DbService_AssignTicketToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetUserByEmail(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, DbService_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
// All implementations must embed UnimplementedDbServiceServer
// for forward compatibility.
type DbServiceServer interface {
	CreateUser(context.Context, *UserRequest) (*UserResponse, error)
	GetUser(context.Context, *UserID) (*UserResponse, error)
	GetAllusers(context.Context, *emptypb.Empty) (*ListUserResponse, error)
	Updateuser(context.Context, *UserRequest) (*emptypb.Empty, error)
	Deleteuser(context.Context, *UserID) (*emptypb.Empty, error)
	CreateRole(context.Context, *RoleRequest) (*RoleResponse, error)
	GetRole(context.Context, *RoleID) (*RoleResponse, error)
	UpdateRole(context.Context, *RoleRequest) (*RoleResponse, error)
	DeleteRole(context.Context, *RoleID) (*emptypb.Empty, error)
	AssignRole(context.Context, *AssignUser) (*RoleID, error)
	UnAssignRole(context.Context, *AssignUser) (*RoleID, error)
	GetAllRoles(context.Context, *emptypb.Empty) (*Roles, error)
	GetAllUserRoles(context.Context, *AssignUser) (*Roles, error)
	CreateTicket(context.Context, *TicketRequest) (*TicketResponse, error)
	GetTicket(context.Context, *TicketID) (*TicketResponse, error)
	GetAllTicketsForUser(context.Context, *TicketID) (*ListTicketResponse, error)
	UpdateTicket(context.Context, *TicketRequest) (*emptypb.Empty, error)
	DeleteTicket(context.Context, *TicketID) (*emptypb.Empty, error)
	GetTicketsByLabel(context.Context, *TicketLabel) (*ListTicketResponse, error)
	GetTicketsByPriority(context.Context, *TicketLabel) (*ListTicketResponse, error)
	AssignTicketToUser(context.Context, *AssignTicket) (*emptypb.Empty, error)
	GetUserByEmail(context.Context, *UserEmail) (*UserResponse, error)
	mustEmbedUnimplementedDbServiceServer()
}

// UnimplementedDbServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbServiceServer struct{}

func (UnimplementedDbServiceServer) CreateUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDbServiceServer) GetUser(context.Context, *UserID) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDbServiceServer) GetAllusers(context.Context, *emptypb.Empty) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllusers not implemented")
}
func (UnimplementedDbServiceServer) Updateuser(context.Context, *UserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateuser not implemented")
}
func (UnimplementedDbServiceServer) Deleteuser(context.Context, *UserID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteuser not implemented")
}
func (UnimplementedDbServiceServer) CreateRole(context.Context, *RoleRequest) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedDbServiceServer) GetRole(context.Context, *RoleID) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedDbServiceServer) UpdateRole(context.Context, *RoleRequest) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedDbServiceServer) DeleteRole(context.Context, *RoleID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedDbServiceServer) AssignRole(context.Context, *AssignUser) (*RoleID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedDbServiceServer) UnAssignRole(context.Context, *AssignUser) (*RoleID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssignRole not implemented")
}
func (UnimplementedDbServiceServer) GetAllRoles(context.Context, *emptypb.Empty) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedDbServiceServer) GetAllUserRoles(context.Context, *AssignUser) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserRoles not implemented")
}
func (UnimplementedDbServiceServer) CreateTicket(context.Context, *TicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedDbServiceServer) GetTicket(context.Context, *TicketID) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedDbServiceServer) GetAllTicketsForUser(context.Context, *TicketID) (*ListTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTicketsForUser not implemented")
}
func (UnimplementedDbServiceServer) UpdateTicket(context.Context, *TicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedDbServiceServer) DeleteTicket(context.Context, *TicketID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedDbServiceServer) GetTicketsByLabel(context.Context, *TicketLabel) (*ListTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByLabel not implemented")
}
func (UnimplementedDbServiceServer) GetTicketsByPriority(context.Context, *TicketLabel) (*ListTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByPriority not implemented")
}
func (UnimplementedDbServiceServer) AssignTicketToUser(context.Context, *AssignTicket) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTicketToUser not implemented")
}
func (UnimplementedDbServiceServer) GetUserByEmail(context.Context, *UserEmail) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedDbServiceServer) mustEmbedUnimplementedDbServiceServer() {}
func (UnimplementedDbServiceServer) testEmbeddedByValue()                   {}

// UnsafeDbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServiceServer will
// result in compilation errors.
type UnsafeDbServiceServer interface {
	mustEmbedUnimplementedDbServiceServer()
}

func RegisterDbServiceServer(s grpc.ServiceRegistrar, srv DbServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbService_ServiceDesc, srv)
}

func _DbService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetAllusers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetAllusers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetAllusers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetAllusers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_Updateuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).Updateuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_Updateuser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).Updateuser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_Deleteuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).Deleteuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_Deleteuser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).Deleteuser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).CreateRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetRole(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).UpdateRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).DeleteRole(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).AssignRole(ctx, req.(*AssignUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_UnAssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).UnAssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_UnAssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).UnAssignRole(ctx, req.(*AssignUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetAllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetAllRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetAllUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetAllUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetAllUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetAllUserRoles(ctx, req.(*AssignUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).CreateTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetTicket(ctx, req.(*TicketID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetAllTicketsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetAllTicketsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetAllTicketsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetAllTicketsForUser(ctx, req.(*TicketID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).UpdateTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).DeleteTicket(ctx, req.(*TicketID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetTicketsByLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetTicketsByLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetTicketsByLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetTicketsByLabel(ctx, req.(*TicketLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetTicketsByPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetTicketsByPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetTicketsByPriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetTicketsByPriority(ctx, req.(*TicketLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_AssignTicketToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).AssignTicketToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_AssignTicketToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).AssignTicketToUser(ctx, req.(*AssignTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUserByEmail(ctx, req.(*UserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// DbService_ServiceDesc is the grpc.ServiceDesc for DbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbService.dbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUser",
			Handler:    _DbService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DbService_GetUser_Handler,
		},
		{
			MethodName: "GetAllusers",
			Handler:    _DbService_GetAllusers_Handler,
		},
		{
			MethodName: "updateuser",
			Handler:    _DbService_Updateuser_Handler,
		},
		{
			MethodName: "deleteuser",
			Handler:    _DbService_Deleteuser_Handler,
		},
		{
			MethodName: "createRole",
			Handler:    _DbService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _DbService_GetRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _DbService_UpdateRole_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _DbService_DeleteRole_Handler,
		},
		{
			MethodName: "assignRole",
			Handler:    _DbService_AssignRole_Handler,
		},
		{
			MethodName: "unAssignRole",
			Handler:    _DbService_UnAssignRole_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _DbService_GetAllRoles_Handler,
		},
		{
			MethodName: "GetAllUserRoles",
			Handler:    _DbService_GetAllUserRoles_Handler,
		},
		{
			MethodName: "createTicket",
			Handler:    _DbService_CreateTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _DbService_GetTicket_Handler,
		},
		{
			MethodName: "GetAllTicketsForUser",
			Handler:    _DbService_GetAllTicketsForUser_Handler,
		},
		{
			MethodName: "updateTicket",
			Handler:    _DbService_UpdateTicket_Handler,
		},
		{
			MethodName: "deleteTicket",
			Handler:    _DbService_DeleteTicket_Handler,
		},
		{
			MethodName: "getTicketsByLabel",
			Handler:    _DbService_GetTicketsByLabel_Handler,
		},
		{
			MethodName: "getTicketsByPriority",
			Handler:    _DbService_GetTicketsByPriority_Handler,
		},
		{
			MethodName: "assignTicketToUser",
			Handler:    _DbService_AssignTicketToUser_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _DbService_GetUserByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
